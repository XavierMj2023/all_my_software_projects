[
    {
      "id": 5,
      "title": "About Git",
      "body": "   Git (/ɡɪt/)[8] is a distributed version control system: tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows (thousands of parallel branches running on different systems).[9][10][11]\n\n   Git was originally authored by Linus Torvalds in 2005 for development of the Linux kernel, with other kernel developers contributing to its initial development.[12] Since 2005, Junio Hamano has been the core maintainer. As with most other distributed version control systems, and unlike most client–server systems, every Git directory on every computer is a full-fledged repository with complete history and full version-tracking abilities, independent of network access or a central server.[13] Git is free and open-source software distributed under the GPL-2.0-only license.\n\n",
      "createdAt": "2024-07-27T23:45:20.847437",
      "updatedAt": "2024-07-27T23:45:20.847437"
    },
    {
      "id": 6,
      "title": "Spring Boot Model–view–controller framework",
      "body": "\n  \u003Ch3\u003E\u003Cstrong\u003EModel–view–controller framework\u003C/strong\u003E\u003C/h3\u003E\n  \u003Cp\u003E\u003Ca href=\"https://en.wikipedia.org/wiki/File:Spring5JuergenHoeller2.jpg\"\u003E\u003Cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/7b/Spring5JuergenHoeller2.jpg/220px-Spring5JuergenHoeller2.jpg\" alt=\"\" srcset=\"//upload.wikimedia.org/wikipedia/commons/thumb/7/7b/Spring5JuergenHoeller2.jpg/330px-Spring5JuergenHoeller2.jpg 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/7b/Spring5JuergenHoeller2.jpg/440px-Spring5JuergenHoeller2.jpg 2x\" sizes=\"100vw\" width=\"220\"\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E&nbsp;\u003C/p\u003E\u003Cp\u003ESpring MVC/Web Reactive presentation given by Jürgen Höller\u003C/p\u003E\u003Cp\u003EThe Spring Framework features its own \u003Ca href=\"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\"\u003Emodel–view–controller\u003C/a\u003E (MVC) \u003Ca href=\"https://en.wikipedia.org/wiki/Web_application_framework\"\u003Eweb application framework\u003C/a\u003E, which was not originally planned. The Spring developers decided to write their own Web framework as a reaction to what they perceived as the poor design of the (then) popular \u003Ca href=\"https://en.wikipedia.org/wiki/Jakarta_Struts\"\u003EJakarta Struts\u003C/a\u003E Web framework,\u003Ca href=\"https://en.wikipedia.org/wiki/Spring_Framework#cite_note-21\"\u003E[21]\u003C/a\u003E as well as deficiencies in other available frameworks. In particular, they felt there was insufficient separation between the presentation and request handling layers, and between the request handling layer and the model.\u003Ca href=\"https://en.wikipedia.org/wiki/Spring_Framework#cite_note-22\"\u003E[22]\u003C/a\u003E\u003C/p\u003E\u003Cp\u003ELike Struts, Spring MVC is a request-based framework. The framework defines \u003Ca href=\"https://en.wikipedia.org/wiki/Strategy_pattern\"\u003Estrategy\u003C/a\u003E interfaces for all of the responsibilities that must be handled by a modern request-based framework. The goal of each interface is to be simple and clear so that it's easy for Spring MVC users to write their own implementations, if they so choose. MVC paves the way for cleaner front end code. All interfaces are tightly coupled to the \u003Ca href=\"https://en.wikipedia.org/wiki/Java_Servlet\"\u003EServlet API\u003C/a\u003E. This tight coupling to the Servlet API is seen by some as a failure on the part of the Spring developers to offer a high-level abstraction for Web-based applications[\u003Ca href=\"https://en.wikipedia.org/wiki/Wikipedia:Citation_needed\"\u003E\u003Ci\u003Ecitation needed\u003C/i\u003E\u003C/a\u003E]. However, this coupling makes sure that the features of the Servlet API remain available to developers while also offering a high abstraction framework to ease working with it.\u003C/p\u003E\u003Cp\u003EThe DispatcherServlet class is the \u003Ca href=\"https://en.wikipedia.org/wiki/Front_controller\"\u003Efront controller\u003C/a\u003E\u003Ca href=\"https://en.wikipedia.org/wiki/Spring_Framework#cite_note-23\"\u003E[23]\u003C/a\u003E of the framework and is responsible for delegating control to the various interfaces during the execution phases of an \u003Ca href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol\"\u003EHTTP request\u003C/a\u003E.\u003C/p\u003E\u003Cp\u003EThe most important interfaces defined by Spring MVC, and their responsibilities, are listed below:\u003C/p\u003E\u003Cul\u003E\u003Cli\u003EController: comes between Model and View to manage incoming requests and redirect to proper response. Controller will map the http request to corresponding methods. It acts as a gate that directs the incoming information. It switches between going into model or view.\u003C/li\u003E\u003Cli\u003EHandlerAdapter: execution of objects that handle incoming requests\u003C/li\u003E\u003Cli\u003EHandlerInterceptor: interception of incoming requests comparable, but not equal to Servlet filters (use is optional and not controlled by DispatcherServlet).\u003C/li\u003E\u003Cli\u003EHandlerMapping: selecting objects that handle incoming requests (handlers) based on any attribute or condition internal or external to those requests\u003C/li\u003E\u003Cli\u003ELocaleResolver: resolving and optionally saving of the \u003Ca href=\"https://en.wikipedia.org/wiki/Locale_(computer_software)\"\u003Elocale\u003C/a\u003E of an individual user\u003C/li\u003E\u003Cli\u003EMultipartResolver: facilitate working with file uploads by wrapping incoming requests\u003C/li\u003E\u003Cli\u003EView: responsible for returning a response to the client. Some requests may go straight to view without going to the model part; others may go through all three.\u003C/li\u003E\u003Cli\u003EViewResolver: selecting a View based on a logical name for the view (use is not strictly required)\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003EEach strategy interface above has an important responsibility in the overall framework. The abstractions offered by these interfaces are powerful, so to allow for a set of variations in their implementations, Spring MVC ships with implementations of all these interfaces and together offers a feature set on top of the Servlet API. However, developers and vendors are free to write other implementations. Spring MVC uses the Java java.util.Map interface as a data-oriented abstraction for the Model where keys are expected to be string values.\u003C/p\u003E\u003Cp\u003EThe ease of testing the implementations of these interfaces seems one important advantage of the high level of abstraction offered by Spring MVC. DispatcherServlet is tightly coupled to the Spring inversion of control container for configuring the web layers of applications. However, web applications can use other parts of the Spring Framework—including the container—and choose not to use Spring MVC.\u003C/p\u003E\n\n",
      "createdAt": "2024-07-27T23:45:20.852436",
      "updatedAt": "2024-07-27T23:45:20.852436"
    },
    {
      "id": 7,
      "title": "third post",
      "body": "   Git (/ɡɪt/)[8] is a distributed version control system: tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows (thousands of parallel branches running on different systems).[9][10][11]\n\n   Git was originally authored by Linus Torvalds in 2005 for development of the Linux kernel, with other kernel developers contributing to its initial development.[12] Since 2005, Junio Hamano has been the core maintainer. As with most other distributed version control systems, and unlike most client–server systems, every Git directory on every computer is a full-fledged repository with complete history and full version-tracking abilities, independent of network access or a central server.[13] Git is free and open-source software distributed under the GPL-2.0-only license.\n\n",
      "createdAt": "2024-07-27T23:45:20.854441",
      "updatedAt": "2024-07-27T23:45:20.854441"
    },
    {
      "id": 8,
      "title": "Fouth post",
      "body": "\n  \u003Ch3\u003E\u003Cstrong\u003EModel–view–controller framework\u003C/strong\u003E\u003C/h3\u003E\n  \u003Cp\u003E\u003Ca href=\"https://en.wikipedia.org/wiki/File:Spring5JuergenHoeller2.jpg\"\u003E\u003Cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/7b/Spring5JuergenHoeller2.jpg/220px-Spring5JuergenHoeller2.jpg\" alt=\"\" srcset=\"//upload.wikimedia.org/wikipedia/commons/thumb/7/7b/Spring5JuergenHoeller2.jpg/330px-Spring5JuergenHoeller2.jpg 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/7b/Spring5JuergenHoeller2.jpg/440px-Spring5JuergenHoeller2.jpg 2x\" sizes=\"100vw\" width=\"220\"\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E&nbsp;\u003C/p\u003E\u003Cp\u003ESpring MVC/Web Reactive presentation given by Jürgen Höller\u003C/p\u003E\u003Cp\u003EThe Spring Framework features its own \u003Ca href=\"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\"\u003Emodel–view–controller\u003C/a\u003E (MVC) \u003Ca href=\"https://en.wikipedia.org/wiki/Web_application_framework\"\u003Eweb application framework\u003C/a\u003E, which was not originally planned. The Spring developers decided to write their own Web framework as a reaction to what they perceived as the poor design of the (then) popular \u003Ca href=\"https://en.wikipedia.org/wiki/Jakarta_Struts\"\u003EJakarta Struts\u003C/a\u003E Web framework,\u003Ca href=\"https://en.wikipedia.org/wiki/Spring_Framework#cite_note-21\"\u003E[21]\u003C/a\u003E as well as deficiencies in other available frameworks. In particular, they felt there was insufficient separation between the presentation and request handling layers, and between the request handling layer and the model.\u003Ca href=\"https://en.wikipedia.org/wiki/Spring_Framework#cite_note-22\"\u003E[22]\u003C/a\u003E\u003C/p\u003E\u003Cp\u003ELike Struts, Spring MVC is a request-based framework. The framework defines \u003Ca href=\"https://en.wikipedia.org/wiki/Strategy_pattern\"\u003Estrategy\u003C/a\u003E interfaces for all of the responsibilities that must be handled by a modern request-based framework. The goal of each interface is to be simple and clear so that it's easy for Spring MVC users to write their own implementations, if they so choose. MVC paves the way for cleaner front end code. All interfaces are tightly coupled to the \u003Ca href=\"https://en.wikipedia.org/wiki/Java_Servlet\"\u003EServlet API\u003C/a\u003E. This tight coupling to the Servlet API is seen by some as a failure on the part of the Spring developers to offer a high-level abstraction for Web-based applications[\u003Ca href=\"https://en.wikipedia.org/wiki/Wikipedia:Citation_needed\"\u003E\u003Ci\u003Ecitation needed\u003C/i\u003E\u003C/a\u003E]. However, this coupling makes sure that the features of the Servlet API remain available to developers while also offering a high abstraction framework to ease working with it.\u003C/p\u003E\u003Cp\u003EThe DispatcherServlet class is the \u003Ca href=\"https://en.wikipedia.org/wiki/Front_controller\"\u003Efront controller\u003C/a\u003E\u003Ca href=\"https://en.wikipedia.org/wiki/Spring_Framework#cite_note-23\"\u003E[23]\u003C/a\u003E of the framework and is responsible for delegating control to the various interfaces during the execution phases of an \u003Ca href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol\"\u003EHTTP request\u003C/a\u003E.\u003C/p\u003E\u003Cp\u003EThe most important interfaces defined by Spring MVC, and their responsibilities, are listed below:\u003C/p\u003E\u003Cul\u003E\u003Cli\u003EController: comes between Model and View to manage incoming requests and redirect to proper response. Controller will map the http request to corresponding methods. It acts as a gate that directs the incoming information. It switches between going into model or view.\u003C/li\u003E\u003Cli\u003EHandlerAdapter: execution of objects that handle incoming requests\u003C/li\u003E\u003Cli\u003EHandlerInterceptor: interception of incoming requests comparable, but not equal to Servlet filters (use is optional and not controlled by DispatcherServlet).\u003C/li\u003E\u003Cli\u003EHandlerMapping: selecting objects that handle incoming requests (handlers) based on any attribute or condition internal or external to those requests\u003C/li\u003E\u003Cli\u003ELocaleResolver: resolving and optionally saving of the \u003Ca href=\"https://en.wikipedia.org/wiki/Locale_(computer_software)\"\u003Elocale\u003C/a\u003E of an individual user\u003C/li\u003E\u003Cli\u003EMultipartResolver: facilitate working with file uploads by wrapping incoming requests\u003C/li\u003E\u003Cli\u003EView: responsible for returning a response to the client. Some requests may go straight to view without going to the model part; others may go through all three.\u003C/li\u003E\u003Cli\u003EViewResolver: selecting a View based on a logical name for the view (use is not strictly required)\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003EEach strategy interface above has an important responsibility in the overall framework. The abstractions offered by these interfaces are powerful, so to allow for a set of variations in their implementations, Spring MVC ships with implementations of all these interfaces and together offers a feature set on top of the Servlet API. However, developers and vendors are free to write other implementations. Spring MVC uses the Java java.util.Map interface as a data-oriented abstraction for the Model where keys are expected to be string values.\u003C/p\u003E\u003Cp\u003EThe ease of testing the implementations of these interfaces seems one important advantage of the high level of abstraction offered by Spring MVC. DispatcherServlet is tightly coupled to the Spring inversion of control container for configuring the web layers of applications. However, web applications can use other parts of the Spring Framework—including the container—and choose not to use Spring MVC.\u003C/p\u003E\n\n",
      "createdAt": "2024-07-27T23:45:20.856443",
      "updatedAt": "2024-07-27T23:45:20.856443"
    },
    {
      "id": 9,
      "title": "Fifth post",
      "body": "   Git (/ɡɪt/)[8] is a distributed version control system: tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows (thousands of parallel branches running on different systems).[9][10][11]\n\n   Git was originally authored by Linus Torvalds in 2005 for development of the Linux kernel, with other kernel developers contributing to its initial development.[12] Since 2005, Junio Hamano has been the core maintainer. As with most other distributed version control systems, and unlike most client–server systems, every Git directory on every computer is a full-fledged repository with complete history and full version-tracking abilities, independent of network access or a central server.[13] Git is free and open-source software distributed under the GPL-2.0-only license.\n\n",
      "createdAt": "2024-07-27T23:45:20.85844",
      "updatedAt": "2024-07-27T23:45:20.85844"
    },
    {
      "id": 10,
      "title": "Sixth post",
      "body": "\n  \u003Ch3\u003E\u003Cstrong\u003EModel–view–controller framework\u003C/strong\u003E\u003C/h3\u003E\n  \u003Cp\u003E\u003Ca href=\"https://en.wikipedia.org/wiki/File:Spring5JuergenHoeller2.jpg\"\u003E\u003Cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/7b/Spring5JuergenHoeller2.jpg/220px-Spring5JuergenHoeller2.jpg\" alt=\"\" srcset=\"//upload.wikimedia.org/wikipedia/commons/thumb/7/7b/Spring5JuergenHoeller2.jpg/330px-Spring5JuergenHoeller2.jpg 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/7b/Spring5JuergenHoeller2.jpg/440px-Spring5JuergenHoeller2.jpg 2x\" sizes=\"100vw\" width=\"220\"\u003E\u003C/a\u003E\u003C/p\u003E\u003Cp\u003E&nbsp;\u003C/p\u003E\u003Cp\u003ESpring MVC/Web Reactive presentation given by Jürgen Höller\u003C/p\u003E\u003Cp\u003EThe Spring Framework features its own \u003Ca href=\"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\"\u003Emodel–view–controller\u003C/a\u003E (MVC) \u003Ca href=\"https://en.wikipedia.org/wiki/Web_application_framework\"\u003Eweb application framework\u003C/a\u003E, which was not originally planned. The Spring developers decided to write their own Web framework as a reaction to what they perceived as the poor design of the (then) popular \u003Ca href=\"https://en.wikipedia.org/wiki/Jakarta_Struts\"\u003EJakarta Struts\u003C/a\u003E Web framework,\u003Ca href=\"https://en.wikipedia.org/wiki/Spring_Framework#cite_note-21\"\u003E[21]\u003C/a\u003E as well as deficiencies in other available frameworks. In particular, they felt there was insufficient separation between the presentation and request handling layers, and between the request handling layer and the model.\u003Ca href=\"https://en.wikipedia.org/wiki/Spring_Framework#cite_note-22\"\u003E[22]\u003C/a\u003E\u003C/p\u003E\u003Cp\u003ELike Struts, Spring MVC is a request-based framework. The framework defines \u003Ca href=\"https://en.wikipedia.org/wiki/Strategy_pattern\"\u003Estrategy\u003C/a\u003E interfaces for all of the responsibilities that must be handled by a modern request-based framework. The goal of each interface is to be simple and clear so that it's easy for Spring MVC users to write their own implementations, if they so choose. MVC paves the way for cleaner front end code. All interfaces are tightly coupled to the \u003Ca href=\"https://en.wikipedia.org/wiki/Java_Servlet\"\u003EServlet API\u003C/a\u003E. This tight coupling to the Servlet API is seen by some as a failure on the part of the Spring developers to offer a high-level abstraction for Web-based applications[\u003Ca href=\"https://en.wikipedia.org/wiki/Wikipedia:Citation_needed\"\u003E\u003Ci\u003Ecitation needed\u003C/i\u003E\u003C/a\u003E]. However, this coupling makes sure that the features of the Servlet API remain available to developers while also offering a high abstraction framework to ease working with it.\u003C/p\u003E\u003Cp\u003EThe DispatcherServlet class is the \u003Ca href=\"https://en.wikipedia.org/wiki/Front_controller\"\u003Efront controller\u003C/a\u003E\u003Ca href=\"https://en.wikipedia.org/wiki/Spring_Framework#cite_note-23\"\u003E[23]\u003C/a\u003E of the framework and is responsible for delegating control to the various interfaces during the execution phases of an \u003Ca href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol\"\u003EHTTP request\u003C/a\u003E.\u003C/p\u003E\u003Cp\u003EThe most important interfaces defined by Spring MVC, and their responsibilities, are listed below:\u003C/p\u003E\u003Cul\u003E\u003Cli\u003EController: comes between Model and View to manage incoming requests and redirect to proper response. Controller will map the http request to corresponding methods. It acts as a gate that directs the incoming information. It switches between going into model or view.\u003C/li\u003E\u003Cli\u003EHandlerAdapter: execution of objects that handle incoming requests\u003C/li\u003E\u003Cli\u003EHandlerInterceptor: interception of incoming requests comparable, but not equal to Servlet filters (use is optional and not controlled by DispatcherServlet).\u003C/li\u003E\u003Cli\u003EHandlerMapping: selecting objects that handle incoming requests (handlers) based on any attribute or condition internal or external to those requests\u003C/li\u003E\u003Cli\u003ELocaleResolver: resolving and optionally saving of the \u003Ca href=\"https://en.wikipedia.org/wiki/Locale_(computer_software)\"\u003Elocale\u003C/a\u003E of an individual user\u003C/li\u003E\u003Cli\u003EMultipartResolver: facilitate working with file uploads by wrapping incoming requests\u003C/li\u003E\u003Cli\u003EView: responsible for returning a response to the client. Some requests may go straight to view without going to the model part; others may go through all three.\u003C/li\u003E\u003Cli\u003EViewResolver: selecting a View based on a logical name for the view (use is not strictly required)\u003C/li\u003E\u003C/ul\u003E\u003Cp\u003EEach strategy interface above has an important responsibility in the overall framework. The abstractions offered by these interfaces are powerful, so to allow for a set of variations in their implementations, Spring MVC ships with implementations of all these interfaces and together offers a feature set on top of the Servlet API. However, developers and vendors are free to write other implementations. Spring MVC uses the Java java.util.Map interface as a data-oriented abstraction for the Model where keys are expected to be string values.\u003C/p\u003E\u003Cp\u003EThe ease of testing the implementations of these interfaces seems one important advantage of the high level of abstraction offered by Spring MVC. DispatcherServlet is tightly coupled to the Spring inversion of control container for configuring the web layers of applications. However, web applications can use other parts of the Spring Framework—including the container—and choose not to use Spring MVC.\u003C/p\u003E\n\n",
      "createdAt": "2024-07-27T23:45:20.86044",
      "updatedAt": "2024-07-27T23:45:20.86044"
    }
  ]