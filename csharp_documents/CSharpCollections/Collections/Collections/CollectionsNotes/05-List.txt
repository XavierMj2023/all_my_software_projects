C# - List<T>
--------------------------------------
The List<T> is a collection of strongly typed objects that can be accessed by index and having methods for 
sorting, searching, and modifying list. 

It is the generic version of the ArrayList that comes under System.Collections.Generic namespace.

----------------------------------------------
List<T> Characteristics
----------------------------------------------
List<T> equivalent of the ArrayList, which implements IList<T>.

It comes under System.Collections.Generic namespace.

List<T> can contain elements of the specified type. It provides compile-time type checking and doesn't 
perform boxing-unboxing because it is generic.

Elements can be added using the Add(), AddRange() methods or collection-initializer syntax.

Elements can be accessed by passing an index e.g. myList[0]. Indexes start from zero.

List<T> performs faster and less error-prone than the ArrayList.

----------------------------------------------
Creating a List
----------------------------------------------
The List<T> is a generic collection, so you need to specify a type parameter for the type of data it can store. 

----------------------------------------------
Adding an Array in a List
----------------------------------------------
Use the AddRange() method to add all the elements from an array or another collection to List.

AddRange() signature: void AddRange(IEnumerable<T> collection)

----------------------------------------------
Accessing a List
----------------------------------------------
A list can be accessed by an index, a for/foreach loop, and using LINQ queries. 
Indexes of a list start from zero.
Pass an index in the square brackets to access individual list items, same as array. 
Use a foreach or for loop to iterate a List<T> collection.

----------------------------------------------
Insert Elements in List
----------------------------------------------
Use the Insert() method inserts an element into the List<T> collection at the specified index.

Insert() signature:void Insert(int index, T item);

-----------------------------------------------
Remove Elements from List
-----------------------------------------------
Use the Remove() method to remove the first occurrence of the specified element in the List<T> collection. 
Use the RemoveAt() method to remove an element from the specified index. 
If no element at the specified index, then the ArgumentOutOfRangeException will be thrown.

Remove() signature: bool Remove(T item)

RemoveAt() signature: void RemoveAt(int index)

-----------------------------------------------
Check Elements in List
-----------------------------------------------
Use the Contains() method to determine whether an element is in the List<T> or not.
